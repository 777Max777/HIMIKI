#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace diplom
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MyNose1")]
	public partial class MyLinqDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertAddres(Addres instance);
    partial void UpdateAddres(Addres instance);
    partial void DeleteAddres(Addres instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertIndicate(Indicate instance);
    partial void UpdateIndicate(Indicate instance);
    partial void DeleteIndicate(Indicate instance);
    partial void InsertPerson(Person instance);
    partial void UpdatePerson(Person instance);
    partial void DeletePerson(Person instance);
    partial void InsertProb_water(Prob_water instance);
    partial void UpdateProb_water(Prob_water instance);
    partial void DeleteProb_water(Prob_water instance);
    partial void InsertProfile(Profile instance);
    partial void UpdateProfile(Profile instance);
    partial void DeleteProfile(Profile instance);
    partial void InsertSensor(Sensor instance);
    partial void UpdateSensor(Sensor instance);
    partial void DeleteSensor(Sensor instance);
    partial void InsertSensor_Indicate(Sensor_Indicate instance);
    partial void UpdateSensor_Indicate(Sensor_Indicate instance);
    partial void DeleteSensor_Indicate(Sensor_Indicate instance);
    partial void Inserttype(type instance);
    partial void Updatetype(type instance);
    partial void Deletetype(type instance);
    #endregion
		
		public MyLinqDataContext() : 
				base(global::diplom.Properties.Settings.Default.MyNose1ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MyLinqDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyLinqDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyLinqDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyLinqDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Addres> Addres
		{
			get
			{
				return this.GetTable<Addres>();
			}
		}
		
		public System.Data.Linq.Table<Category> Category
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Indicate> Indicate
		{
			get
			{
				return this.GetTable<Indicate>();
			}
		}
		
		public System.Data.Linq.Table<Person> Person
		{
			get
			{
				return this.GetTable<Person>();
			}
		}
		
		public System.Data.Linq.Table<Prob_Indicate> Prob_Indicate
		{
			get
			{
				return this.GetTable<Prob_Indicate>();
			}
		}
		
		public System.Data.Linq.Table<Prob_water> Prob_water
		{
			get
			{
				return this.GetTable<Prob_water>();
			}
		}
		
		public System.Data.Linq.Table<Profile> Profile
		{
			get
			{
				return this.GetTable<Profile>();
			}
		}
		
		public System.Data.Linq.Table<Sensor> Sensor
		{
			get
			{
				return this.GetTable<Sensor>();
			}
		}
		
		public System.Data.Linq.Table<Sensor_Indicate> Sensor_Indicate
		{
			get
			{
				return this.GetTable<Sensor_Indicate>();
			}
		}
		
		public System.Data.Linq.Table<type> type
		{
			get
			{
				return this.GetTable<type>();
			}
		}
		
		public System.Data.Linq.Table<Sensor_Profile> Sensor_Profile
		{
			get
			{
				return this.GetTable<Sensor_Profile>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Addres")]
	public partial class Addres : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id_Address;
		
		private string _Широта;
		
		private string _Долгота;
		
		private EntitySet<Prob_water> _Prob_water;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_AddressChanging(long value);
    partial void Onid_AddressChanged();
    partial void OnШиротаChanging(string value);
    partial void OnШиротаChanged();
    partial void OnДолготаChanging(string value);
    partial void OnДолготаChanged();
    #endregion
		
		public Addres()
		{
			this._Prob_water = new EntitySet<Prob_water>(new Action<Prob_water>(this.attach_Prob_water), new Action<Prob_water>(this.detach_Prob_water));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_Address", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id_Address
		{
			get
			{
				return this._id_Address;
			}
			set
			{
				if ((this._id_Address != value))
				{
					this.Onid_AddressChanging(value);
					this.SendPropertyChanging();
					this._id_Address = value;
					this.SendPropertyChanged("id_Address");
					this.Onid_AddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Широта", DbType="VarChar(30)")]
		public string Широта
		{
			get
			{
				return this._Широта;
			}
			set
			{
				if ((this._Широта != value))
				{
					this.OnШиротаChanging(value);
					this.SendPropertyChanging();
					this._Широта = value;
					this.SendPropertyChanged("Широта");
					this.OnШиротаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Долгота", DbType="VarChar(30)")]
		public string Долгота
		{
			get
			{
				return this._Долгота;
			}
			set
			{
				if ((this._Долгота != value))
				{
					this.OnДолготаChanging(value);
					this.SendPropertyChanging();
					this._Долгота = value;
					this.SendPropertyChanged("Долгота");
					this.OnДолготаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Addres_Prob_water", Storage="_Prob_water", ThisKey="id_Address", OtherKey="id_Address")]
		public EntitySet<Prob_water> Prob_water
		{
			get
			{
				return this._Prob_water;
			}
			set
			{
				this._Prob_water.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Prob_water(Prob_water entity)
		{
			this.SendPropertyChanging();
			entity.Addres = this;
		}
		
		private void detach_Prob_water(Prob_water entity)
		{
			this.SendPropertyChanging();
			entity.Addres = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id_categ;
		
		private string _Название;
		
		private EntitySet<Prob_water> _Prob_water;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_categChanging(long value);
    partial void Onid_categChanged();
    partial void OnНазваниеChanging(string value);
    partial void OnНазваниеChanged();
    #endregion
		
		public Category()
		{
			this._Prob_water = new EntitySet<Prob_water>(new Action<Prob_water>(this.attach_Prob_water), new Action<Prob_water>(this.detach_Prob_water));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_categ", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id_categ
		{
			get
			{
				return this._id_categ;
			}
			set
			{
				if ((this._id_categ != value))
				{
					this.Onid_categChanging(value);
					this.SendPropertyChanging();
					this._id_categ = value;
					this.SendPropertyChanged("id_categ");
					this.Onid_categChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Название", DbType="VarChar(30)")]
		public string Название
		{
			get
			{
				return this._Название;
			}
			set
			{
				if ((this._Название != value))
				{
					this.OnНазваниеChanging(value);
					this.SendPropertyChanging();
					this._Название = value;
					this.SendPropertyChanged("Название");
					this.OnНазваниеChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Prob_water", Storage="_Prob_water", ThisKey="id_categ", OtherKey="id_categ")]
		public EntitySet<Prob_water> Prob_water
		{
			get
			{
				return this._Prob_water;
			}
			set
			{
				this._Prob_water.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Prob_water(Prob_water entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Prob_water(Prob_water entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Indicate")]
	public partial class Indicate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Название;
		
		private string _Аббревиатура;
		
		private string _ГОСТ;
		
		private System.Nullable<double> _Min_значение;
		
		private System.Nullable<double> _Max_значение;
		
		private long _id_Indicate;
		
		private EntityRef<Sensor_Indicate> _Sensor_Indicate;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnНазваниеChanging(string value);
    partial void OnНазваниеChanged();
    partial void OnАббревиатураChanging(string value);
    partial void OnАббревиатураChanged();
    partial void OnГОСТChanging(string value);
    partial void OnГОСТChanged();
    partial void OnMin_значениеChanging(System.Nullable<double> value);
    partial void OnMin_значениеChanged();
    partial void OnMax_значениеChanging(System.Nullable<double> value);
    partial void OnMax_значениеChanged();
    partial void Onid_IndicateChanging(long value);
    partial void Onid_IndicateChanged();
    #endregion
		
		public Indicate()
		{
			this._Sensor_Indicate = default(EntityRef<Sensor_Indicate>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Название", DbType="VarChar(30)")]
		public string Название
		{
			get
			{
				return this._Название;
			}
			set
			{
				if ((this._Название != value))
				{
					this.OnНазваниеChanging(value);
					this.SendPropertyChanging();
					this._Название = value;
					this.SendPropertyChanged("Название");
					this.OnНазваниеChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Аббревиатура", DbType="VarChar(30)")]
		public string Аббревиатура
		{
			get
			{
				return this._Аббревиатура;
			}
			set
			{
				if ((this._Аббревиатура != value))
				{
					this.OnАббревиатураChanging(value);
					this.SendPropertyChanging();
					this._Аббревиатура = value;
					this.SendPropertyChanged("Аббревиатура");
					this.OnАббревиатураChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ГОСТ", DbType="VarChar(30)")]
		public string ГОСТ
		{
			get
			{
				return this._ГОСТ;
			}
			set
			{
				if ((this._ГОСТ != value))
				{
					this.OnГОСТChanging(value);
					this.SendPropertyChanging();
					this._ГОСТ = value;
					this.SendPropertyChanged("ГОСТ");
					this.OnГОСТChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Min_значение", DbType="Float")]
		public System.Nullable<double> Min_значение
		{
			get
			{
				return this._Min_значение;
			}
			set
			{
				if ((this._Min_значение != value))
				{
					this.OnMin_значениеChanging(value);
					this.SendPropertyChanging();
					this._Min_значение = value;
					this.SendPropertyChanged("Min_значение");
					this.OnMin_значениеChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Max_значение", DbType="Float")]
		public System.Nullable<double> Max_значение
		{
			get
			{
				return this._Max_значение;
			}
			set
			{
				if ((this._Max_значение != value))
				{
					this.OnMax_значениеChanging(value);
					this.SendPropertyChanging();
					this._Max_значение = value;
					this.SendPropertyChanged("Max_значение");
					this.OnMax_значениеChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_Indicate", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id_Indicate
		{
			get
			{
				return this._id_Indicate;
			}
			set
			{
				if ((this._id_Indicate != value))
				{
					this.Onid_IndicateChanging(value);
					this.SendPropertyChanging();
					this._id_Indicate = value;
					this.SendPropertyChanged("id_Indicate");
					this.Onid_IndicateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Indicate_Sensor_Indicate", Storage="_Sensor_Indicate", ThisKey="id_Indicate", OtherKey="id_Indicate", IsUnique=true, IsForeignKey=false)]
		public Sensor_Indicate Sensor_Indicate
		{
			get
			{
				return this._Sensor_Indicate.Entity;
			}
			set
			{
				Sensor_Indicate previousValue = this._Sensor_Indicate.Entity;
				if (((previousValue != value) 
							|| (this._Sensor_Indicate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sensor_Indicate.Entity = null;
						previousValue.Indicate = null;
					}
					this._Sensor_Indicate.Entity = value;
					if ((value != null))
					{
						value.Indicate = this;
					}
					this.SendPropertyChanged("Sensor_Indicate");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Person")]
	public partial class Person : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id_pers;
		
		private string _Фамилия;
		
		private string _Имя;
		
		private string _Отчество;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_persChanging(long value);
    partial void Onid_persChanged();
    partial void OnФамилияChanging(string value);
    partial void OnФамилияChanged();
    partial void OnИмяChanging(string value);
    partial void OnИмяChanged();
    partial void OnОтчествоChanging(string value);
    partial void OnОтчествоChanged();
    #endregion
		
		public Person()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_pers", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id_pers
		{
			get
			{
				return this._id_pers;
			}
			set
			{
				if ((this._id_pers != value))
				{
					this.Onid_persChanging(value);
					this.SendPropertyChanging();
					this._id_pers = value;
					this.SendPropertyChanged("id_pers");
					this.Onid_persChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Фамилия", DbType="VarChar(30)")]
		public string Фамилия
		{
			get
			{
				return this._Фамилия;
			}
			set
			{
				if ((this._Фамилия != value))
				{
					this.OnФамилияChanging(value);
					this.SendPropertyChanging();
					this._Фамилия = value;
					this.SendPropertyChanged("Фамилия");
					this.OnФамилияChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Имя", DbType="VarChar(30)")]
		public string Имя
		{
			get
			{
				return this._Имя;
			}
			set
			{
				if ((this._Имя != value))
				{
					this.OnИмяChanging(value);
					this.SendPropertyChanging();
					this._Имя = value;
					this.SendPropertyChanged("Имя");
					this.OnИмяChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Отчество", DbType="VarChar(30)")]
		public string Отчество
		{
			get
			{
				return this._Отчество;
			}
			set
			{
				if ((this._Отчество != value))
				{
					this.OnОтчествоChanging(value);
					this.SendPropertyChanging();
					this._Отчество = value;
					this.SendPropertyChanged("Отчество");
					this.OnОтчествоChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Prob_Indicate")]
	public partial class Prob_Indicate
	{
		
		private System.Nullable<double> _Значение;
		
		private long _id_Indicate;
		
		private long _id_prob;
		
		public Prob_Indicate()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Значение", DbType="Float")]
		public System.Nullable<double> Значение
		{
			get
			{
				return this._Значение;
			}
			set
			{
				if ((this._Значение != value))
				{
					this._Значение = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_Indicate", DbType="BigInt NOT NULL")]
		public long id_Indicate
		{
			get
			{
				return this._id_Indicate;
			}
			set
			{
				if ((this._id_Indicate != value))
				{
					this._id_Indicate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_prob", DbType="BigInt NOT NULL")]
		public long id_prob
		{
			get
			{
				return this._id_prob;
			}
			set
			{
				if ((this._id_prob != value))
				{
					this._id_prob = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Prob_water")]
	public partial class Prob_water : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<System.DateTime> _Дата_забора;
		
		private System.Nullable<System.DateTime> _Дата_анализа;
		
		private string _Консервация;
		
		private string _Объем;
		
		private string _Название;
		
		private System.Nullable<int> _Степень_загрязнения;
		
		private long _id_prob;
		
		private long _id_Address;
		
		private long _id_type;
		
		private long _id_categ;
		
		private EntityRef<Addres> _Addres;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<type> _type;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnДата_забораChanging(System.Nullable<System.DateTime> value);
    partial void OnДата_забораChanged();
    partial void OnДата_анализаChanging(System.Nullable<System.DateTime> value);
    partial void OnДата_анализаChanged();
    partial void OnКонсервацияChanging(string value);
    partial void OnКонсервацияChanged();
    partial void OnОбъемChanging(string value);
    partial void OnОбъемChanged();
    partial void OnНазваниеChanging(string value);
    partial void OnНазваниеChanged();
    partial void OnСтепень_загрязненияChanging(System.Nullable<int> value);
    partial void OnСтепень_загрязненияChanged();
    partial void Onid_probChanging(long value);
    partial void Onid_probChanged();
    partial void Onid_AddressChanging(long value);
    partial void Onid_AddressChanged();
    partial void Onid_typeChanging(long value);
    partial void Onid_typeChanged();
    partial void Onid_categChanging(long value);
    partial void Onid_categChanged();
    #endregion
		
		public Prob_water()
		{
			this._Addres = default(EntityRef<Addres>);
			this._Category = default(EntityRef<Category>);
			this._type = default(EntityRef<type>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Дата_забора", DbType="DateTime")]
		public System.Nullable<System.DateTime> Дата_забора
		{
			get
			{
				return this._Дата_забора;
			}
			set
			{
				if ((this._Дата_забора != value))
				{
					this.OnДата_забораChanging(value);
					this.SendPropertyChanging();
					this._Дата_забора = value;
					this.SendPropertyChanged("Дата_забора");
					this.OnДата_забораChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Дата_анализа", DbType="DateTime")]
		public System.Nullable<System.DateTime> Дата_анализа
		{
			get
			{
				return this._Дата_анализа;
			}
			set
			{
				if ((this._Дата_анализа != value))
				{
					this.OnДата_анализаChanging(value);
					this.SendPropertyChanging();
					this._Дата_анализа = value;
					this.SendPropertyChanged("Дата_анализа");
					this.OnДата_анализаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Консервация", DbType="VarChar(30)")]
		public string Консервация
		{
			get
			{
				return this._Консервация;
			}
			set
			{
				if ((this._Консервация != value))
				{
					this.OnКонсервацияChanging(value);
					this.SendPropertyChanging();
					this._Консервация = value;
					this.SendPropertyChanged("Консервация");
					this.OnКонсервацияChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Объем", DbType="VarChar(30)")]
		public string Объем
		{
			get
			{
				return this._Объем;
			}
			set
			{
				if ((this._Объем != value))
				{
					this.OnОбъемChanging(value);
					this.SendPropertyChanging();
					this._Объем = value;
					this.SendPropertyChanged("Объем");
					this.OnОбъемChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Название", DbType="VarChar(30)")]
		public string Название
		{
			get
			{
				return this._Название;
			}
			set
			{
				if ((this._Название != value))
				{
					this.OnНазваниеChanging(value);
					this.SendPropertyChanging();
					this._Название = value;
					this.SendPropertyChanged("Название");
					this.OnНазваниеChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Степень_загрязнения", DbType="Int")]
		public System.Nullable<int> Степень_загрязнения
		{
			get
			{
				return this._Степень_загрязнения;
			}
			set
			{
				if ((this._Степень_загрязнения != value))
				{
					this.OnСтепень_загрязненияChanging(value);
					this.SendPropertyChanging();
					this._Степень_загрязнения = value;
					this.SendPropertyChanged("Степень_загрязнения");
					this.OnСтепень_загрязненияChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_prob", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id_prob
		{
			get
			{
				return this._id_prob;
			}
			set
			{
				if ((this._id_prob != value))
				{
					this.Onid_probChanging(value);
					this.SendPropertyChanging();
					this._id_prob = value;
					this.SendPropertyChanged("id_prob");
					this.Onid_probChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_Address", DbType="BigInt NOT NULL")]
		public long id_Address
		{
			get
			{
				return this._id_Address;
			}
			set
			{
				if ((this._id_Address != value))
				{
					if (this._Addres.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_AddressChanging(value);
					this.SendPropertyChanging();
					this._id_Address = value;
					this.SendPropertyChanged("id_Address");
					this.Onid_AddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_type", DbType="BigInt NOT NULL")]
		public long id_type
		{
			get
			{
				return this._id_type;
			}
			set
			{
				if ((this._id_type != value))
				{
					if (this._type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_typeChanging(value);
					this.SendPropertyChanging();
					this._id_type = value;
					this.SendPropertyChanged("id_type");
					this.Onid_typeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_categ", DbType="BigInt NOT NULL")]
		public long id_categ
		{
			get
			{
				return this._id_categ;
			}
			set
			{
				if ((this._id_categ != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_categChanging(value);
					this.SendPropertyChanging();
					this._id_categ = value;
					this.SendPropertyChanged("id_categ");
					this.Onid_categChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Addres_Prob_water", Storage="_Addres", ThisKey="id_Address", OtherKey="id_Address", IsForeignKey=true)]
		public Addres Addres
		{
			get
			{
				return this._Addres.Entity;
			}
			set
			{
				Addres previousValue = this._Addres.Entity;
				if (((previousValue != value) 
							|| (this._Addres.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Addres.Entity = null;
						previousValue.Prob_water.Remove(this);
					}
					this._Addres.Entity = value;
					if ((value != null))
					{
						value.Prob_water.Add(this);
						this._id_Address = value.id_Address;
					}
					else
					{
						this._id_Address = default(long);
					}
					this.SendPropertyChanged("Addres");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Prob_water", Storage="_Category", ThisKey="id_categ", OtherKey="id_categ", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Prob_water.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Prob_water.Add(this);
						this._id_categ = value.id_categ;
					}
					else
					{
						this._id_categ = default(long);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="type_Prob_water", Storage="_type", ThisKey="id_type", OtherKey="id_type", IsForeignKey=true)]
		public type type
		{
			get
			{
				return this._type.Entity;
			}
			set
			{
				type previousValue = this._type.Entity;
				if (((previousValue != value) 
							|| (this._type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._type.Entity = null;
						previousValue.Prob_water.Remove(this);
					}
					this._type.Entity = value;
					if ((value != null))
					{
						value.Prob_water.Add(this);
						this._id_type = value.id_type;
					}
					else
					{
						this._id_type = default(long);
					}
					this.SendPropertyChanged("type");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Profile")]
	public partial class Profile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id_Prof;
		
		private System.Nullable<int> _Количество_сенсоров;
		
		private string _Название;
		
		private string _Аббревиатура;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_ProfChanging(long value);
    partial void Onid_ProfChanged();
    partial void OnКоличество_сенсоровChanging(System.Nullable<int> value);
    partial void OnКоличество_сенсоровChanged();
    partial void OnНазваниеChanging(string value);
    partial void OnНазваниеChanged();
    partial void OnАббревиатураChanging(string value);
    partial void OnАббревиатураChanged();
    #endregion
		
		public Profile()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_Prof", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id_Prof
		{
			get
			{
				return this._id_Prof;
			}
			set
			{
				if ((this._id_Prof != value))
				{
					this.Onid_ProfChanging(value);
					this.SendPropertyChanging();
					this._id_Prof = value;
					this.SendPropertyChanged("id_Prof");
					this.Onid_ProfChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Количество_сенсоров", DbType="Int")]
		public System.Nullable<int> Количество_сенсоров
		{
			get
			{
				return this._Количество_сенсоров;
			}
			set
			{
				if ((this._Количество_сенсоров != value))
				{
					this.OnКоличество_сенсоровChanging(value);
					this.SendPropertyChanging();
					this._Количество_сенсоров = value;
					this.SendPropertyChanged("Количество_сенсоров");
					this.OnКоличество_сенсоровChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Название", DbType="VarChar(30)")]
		public string Название
		{
			get
			{
				return this._Название;
			}
			set
			{
				if ((this._Название != value))
				{
					this.OnНазваниеChanging(value);
					this.SendPropertyChanging();
					this._Название = value;
					this.SendPropertyChanged("Название");
					this.OnНазваниеChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Аббревиатура", DbType="VarChar(30)")]
		public string Аббревиатура
		{
			get
			{
				return this._Аббревиатура;
			}
			set
			{
				if ((this._Аббревиатура != value))
				{
					this.OnАббревиатураChanging(value);
					this.SendPropertyChanging();
					this._Аббревиатура = value;
					this.SendPropertyChanged("Аббревиатура");
					this.OnАббревиатураChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sensor")]
	public partial class Sensor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id_sensor;
		
		private string _Название;
		
		private string _Аббревиатура;
		
		private EntitySet<Sensor_Indicate> _Sensor_Indicate;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_sensorChanging(long value);
    partial void Onid_sensorChanged();
    partial void OnНазваниеChanging(string value);
    partial void OnНазваниеChanged();
    partial void OnАббревиатураChanging(string value);
    partial void OnАббревиатураChanged();
    #endregion
		
		public Sensor()
		{
			this._Sensor_Indicate = new EntitySet<Sensor_Indicate>(new Action<Sensor_Indicate>(this.attach_Sensor_Indicate), new Action<Sensor_Indicate>(this.detach_Sensor_Indicate));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_sensor", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id_sensor
		{
			get
			{
				return this._id_sensor;
			}
			set
			{
				if ((this._id_sensor != value))
				{
					this.Onid_sensorChanging(value);
					this.SendPropertyChanging();
					this._id_sensor = value;
					this.SendPropertyChanged("id_sensor");
					this.Onid_sensorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Название", DbType="VarChar(30)")]
		public string Название
		{
			get
			{
				return this._Название;
			}
			set
			{
				if ((this._Название != value))
				{
					this.OnНазваниеChanging(value);
					this.SendPropertyChanging();
					this._Название = value;
					this.SendPropertyChanged("Название");
					this.OnНазваниеChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Аббревиатура", DbType="VarChar(30)")]
		public string Аббревиатура
		{
			get
			{
				return this._Аббревиатура;
			}
			set
			{
				if ((this._Аббревиатура != value))
				{
					this.OnАббревиатураChanging(value);
					this.SendPropertyChanging();
					this._Аббревиатура = value;
					this.SendPropertyChanged("Аббревиатура");
					this.OnАббревиатураChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sensor_Sensor_Indicate", Storage="_Sensor_Indicate", ThisKey="id_sensor", OtherKey="id_sensor")]
		public EntitySet<Sensor_Indicate> Sensor_Indicate
		{
			get
			{
				return this._Sensor_Indicate;
			}
			set
			{
				this._Sensor_Indicate.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sensor_Indicate(Sensor_Indicate entity)
		{
			this.SendPropertyChanging();
			entity.Sensor = this;
		}
		
		private void detach_Sensor_Indicate(Sensor_Indicate entity)
		{
			this.SendPropertyChanging();
			entity.Sensor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sensor_Indicate")]
	public partial class Sensor_Indicate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id_Indicate;
		
		private long _id_sensor;
		
		private EntityRef<Indicate> _Indicate;
		
		private EntityRef<Sensor> _Sensor;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_IndicateChanging(long value);
    partial void Onid_IndicateChanged();
    partial void Onid_sensorChanging(long value);
    partial void Onid_sensorChanged();
    #endregion
		
		public Sensor_Indicate()
		{
			this._Indicate = default(EntityRef<Indicate>);
			this._Sensor = default(EntityRef<Sensor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_Indicate", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long id_Indicate
		{
			get
			{
				return this._id_Indicate;
			}
			set
			{
				if ((this._id_Indicate != value))
				{
					if (this._Indicate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_IndicateChanging(value);
					this.SendPropertyChanging();
					this._id_Indicate = value;
					this.SendPropertyChanged("id_Indicate");
					this.Onid_IndicateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_sensor", DbType="BigInt NOT NULL")]
		public long id_sensor
		{
			get
			{
				return this._id_sensor;
			}
			set
			{
				if ((this._id_sensor != value))
				{
					if (this._Sensor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_sensorChanging(value);
					this.SendPropertyChanging();
					this._id_sensor = value;
					this.SendPropertyChanged("id_sensor");
					this.Onid_sensorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Indicate_Sensor_Indicate", Storage="_Indicate", ThisKey="id_Indicate", OtherKey="id_Indicate", IsForeignKey=true)]
		public Indicate Indicate
		{
			get
			{
				return this._Indicate.Entity;
			}
			set
			{
				Indicate previousValue = this._Indicate.Entity;
				if (((previousValue != value) 
							|| (this._Indicate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Indicate.Entity = null;
						previousValue.Sensor_Indicate = null;
					}
					this._Indicate.Entity = value;
					if ((value != null))
					{
						value.Sensor_Indicate = this;
						this._id_Indicate = value.id_Indicate;
					}
					else
					{
						this._id_Indicate = default(long);
					}
					this.SendPropertyChanged("Indicate");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sensor_Sensor_Indicate", Storage="_Sensor", ThisKey="id_sensor", OtherKey="id_sensor", IsForeignKey=true)]
		public Sensor Sensor
		{
			get
			{
				return this._Sensor.Entity;
			}
			set
			{
				Sensor previousValue = this._Sensor.Entity;
				if (((previousValue != value) 
							|| (this._Sensor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sensor.Entity = null;
						previousValue.Sensor_Indicate.Remove(this);
					}
					this._Sensor.Entity = value;
					if ((value != null))
					{
						value.Sensor_Indicate.Add(this);
						this._id_sensor = value.id_sensor;
					}
					else
					{
						this._id_sensor = default(long);
					}
					this.SendPropertyChanged("Sensor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.type")]
	public partial class type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id_type;
		
		private string _Название;
		
		private EntitySet<Prob_water> _Prob_water;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_typeChanging(long value);
    partial void Onid_typeChanged();
    partial void OnНазваниеChanging(string value);
    partial void OnНазваниеChanged();
    #endregion
		
		public type()
		{
			this._Prob_water = new EntitySet<Prob_water>(new Action<Prob_water>(this.attach_Prob_water), new Action<Prob_water>(this.detach_Prob_water));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_type", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id_type
		{
			get
			{
				return this._id_type;
			}
			set
			{
				if ((this._id_type != value))
				{
					this.Onid_typeChanging(value);
					this.SendPropertyChanging();
					this._id_type = value;
					this.SendPropertyChanged("id_type");
					this.Onid_typeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Название", DbType="VarChar(30)")]
		public string Название
		{
			get
			{
				return this._Название;
			}
			set
			{
				if ((this._Название != value))
				{
					this.OnНазваниеChanging(value);
					this.SendPropertyChanging();
					this._Название = value;
					this.SendPropertyChanged("Название");
					this.OnНазваниеChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="type_Prob_water", Storage="_Prob_water", ThisKey="id_type", OtherKey="id_type")]
		public EntitySet<Prob_water> Prob_water
		{
			get
			{
				return this._Prob_water;
			}
			set
			{
				this._Prob_water.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Prob_water(Prob_water entity)
		{
			this.SendPropertyChanging();
			entity.type = this;
		}
		
		private void detach_Prob_water(Prob_water entity)
		{
			this.SendPropertyChanging();
			entity.type = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sensor_Profile")]
	public partial class Sensor_Profile
	{
		
		private long _id_pers;
		
		private long _id_Prof;
		
		private long _id_sensor;
		
		public Sensor_Profile()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_pers", DbType="BigInt NOT NULL")]
		public long id_pers
		{
			get
			{
				return this._id_pers;
			}
			set
			{
				if ((this._id_pers != value))
				{
					this._id_pers = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_Prof", DbType="BigInt NOT NULL")]
		public long id_Prof
		{
			get
			{
				return this._id_Prof;
			}
			set
			{
				if ((this._id_Prof != value))
				{
					this._id_Prof = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_sensor", DbType="BigInt NOT NULL")]
		public long id_sensor
		{
			get
			{
				return this._id_sensor;
			}
			set
			{
				if ((this._id_sensor != value))
				{
					this._id_sensor = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
